{
  "stats": {
    "suites": 5,
    "tests": 7,
    "passes": 3,
    "pending": 1,
    "failures": 3,
    "start": "2017-06-05T17:24:44.748Z",
    "end": "2017-06-05T17:24:44.767Z",
    "duration": 19,
    "testsRegistered": 7,
    "passPercent": 50,
    "pendingPercent": 14.3,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Nesting Suites",
        "suites": [
          {
            "title": "Child Nested Suite",
            "suites": [
              {
                "title": "Grandchild Nested Suite",
                "suites": [],
                "tests": [
                  {
                    "title": "should be true",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be true",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a41734b-da84-4f1e-ab10-4a8a1c4440bb",
                    "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should be false",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be false",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {
                      "operator": "to equal",
                      "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
                      "details": "at bar, A has false and B has true",
                      "showDiff": true,
                      "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
                      "negate": false,
                      "assertion": {
                        "obj": {
                          "foo": true,
                          "bar": false,
                          "baz": 1
                        },
                        "anyOne": false,
                        "negate": false,
                        "params": {
                          "operator": "to equal",
                          "expected": {
                            "foo": true,
                            "bar": true,
                            "baz": 1
                          },
                          "details": "at bar, A has false and B has true",
                          "showDiff": true,
                          "actual": {
                            "foo": true,
                            "bar": false,
                            "baz": 1
                          },
                          "negate": false,
                          "assertion": "[Circular ~.suites.suites.0.suites.0.suites.0.tests.1.err.assertion]"
                        },
                        "light": false
                      },
                      "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
                      "generatedMessage": true,
                      "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
                      "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
                    },
                    "isRoot": false,
                    "uuid": "63b71b67-c497-4a91-833b-0c562a3b3ac6",
                    "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/cases/nesting.js",
                "uuid": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/adamgruber/Sites/ma-test/cases/nesting.js",
                "passes": [
                  {
                    "title": "should be true",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be true",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a41734b-da84-4f1e-ab10-4a8a1c4440bb",
                    "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [
                  {
                    "title": "should be false",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be false",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {
                      "operator": "to equal",
                      "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
                      "details": "at bar, A has false and B has true",
                      "showDiff": true,
                      "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
                      "negate": false,
                      "assertion": {
                        "obj": {
                          "foo": true,
                          "bar": false,
                          "baz": 1
                        },
                        "anyOne": false,
                        "negate": false,
                        "params": {
                          "operator": "to equal",
                          "expected": {
                            "foo": true,
                            "bar": true,
                            "baz": 1
                          },
                          "details": "at bar, A has false and B has true",
                          "showDiff": true,
                          "actual": {
                            "foo": true,
                            "bar": false,
                            "baz": 1
                          },
                          "negate": false,
                          "assertion": "[Circular ~.suites.suites.0.suites.0.suites.0.failures.0.err.assertion]"
                        },
                        "light": false
                      },
                      "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
                      "generatedMessage": true,
                      "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
                      "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
                    },
                    "isRoot": false,
                    "uuid": "63b71b67-c497-4a91-833b-0c562a3b3ac6",
                    "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 1,
                "totalFailures": 1,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": true,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/cases/nesting.js",
            "uuid": "566d39fd-0360-482d-bb49-b5f16c340b16",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/adamgruber/Sites/ma-test/cases/nesting.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "Child Nested Suite",
            "suites": [
              {
                "title": "Grandchild Nested Suite",
                "suites": [],
                "tests": [
                  {
                    "title": "should be false",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be false",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {
                      "operator": "to equal",
                      "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
                      "details": "at bar, A has false and B has true",
                      "showDiff": true,
                      "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
                      "negate": false,
                      "assertion": {
                        "obj": {
                          "foo": true,
                          "bar": false,
                          "baz": 1
                        },
                        "anyOne": false,
                        "negate": false,
                        "params": {
                          "operator": "to equal",
                          "expected": {
                            "foo": true,
                            "bar": true,
                            "baz": 1
                          },
                          "details": "at bar, A has false and B has true",
                          "showDiff": true,
                          "actual": {
                            "foo": true,
                            "bar": false,
                            "baz": 1
                          },
                          "negate": false,
                          "assertion": "[Circular ~.suites.suites.0.suites.1.suites.0.tests.0.err.assertion]"
                        },
                        "light": false
                      },
                      "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
                      "generatedMessage": true,
                      "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
                      "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
                    },
                    "isRoot": false,
                    "uuid": "48c27762-0f0e-40ae-8709-a94c8c74179d",
                    "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should be false",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be false",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {
                      "operator": "to equal",
                      "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
                      "details": "at bar, A has false and B has true",
                      "showDiff": true,
                      "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
                      "negate": false,
                      "assertion": {
                        "obj": {
                          "foo": true,
                          "bar": false,
                          "baz": 1
                        },
                        "anyOne": false,
                        "negate": false,
                        "params": {
                          "operator": "to equal",
                          "expected": {
                            "foo": true,
                            "bar": true,
                            "baz": 1
                          },
                          "details": "at bar, A has false and B has true",
                          "showDiff": true,
                          "actual": {
                            "foo": true,
                            "bar": false,
                            "baz": 1
                          },
                          "negate": false,
                          "assertion": "[Circular ~.suites.suites.0.suites.1.suites.0.tests.1.err.assertion]"
                        },
                        "light": false
                      },
                      "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
                      "generatedMessage": true,
                      "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
                      "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
                    },
                    "isRoot": false,
                    "uuid": "ba7b55de-1aeb-4045-a188-ec8b9a686cc5",
                    "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/cases/nesting.js",
                "uuid": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/adamgruber/Sites/ma-test/cases/nesting.js",
                "passes": [],
                "failures": [
                  {
                    "title": "should be false",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be false",
                    "timedOut": false,
                    "duration": 0,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {
                      "operator": "to equal",
                      "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
                      "details": "at bar, A has false and B has true",
                      "showDiff": true,
                      "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
                      "negate": false,
                      "assertion": {
                        "obj": {
                          "foo": true,
                          "bar": false,
                          "baz": 1
                        },
                        "anyOne": false,
                        "negate": false,
                        "params": {
                          "operator": "to equal",
                          "expected": {
                            "foo": true,
                            "bar": true,
                            "baz": 1
                          },
                          "details": "at bar, A has false and B has true",
                          "showDiff": true,
                          "actual": {
                            "foo": true,
                            "bar": false,
                            "baz": 1
                          },
                          "negate": false,
                          "assertion": "[Circular ~.suites.suites.0.suites.1.suites.0.failures.0.err.assertion]"
                        },
                        "light": false
                      },
                      "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
                      "generatedMessage": true,
                      "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
                      "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
                    },
                    "isRoot": false,
                    "uuid": "48c27762-0f0e-40ae-8709-a94c8c74179d",
                    "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should be false",
                    "fullTitle": "Child Nested Suite Grandchild Nested Suite should be false",
                    "timedOut": false,
                    "duration": 1,
                    "state": "failed",
                    "pass": false,
                    "fail": true,
                    "pending": false,
                    "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                    "err": {
                      "operator": "to equal",
                      "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
                      "details": "at bar, A has false and B has true",
                      "showDiff": true,
                      "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
                      "negate": false,
                      "assertion": {
                        "obj": {
                          "foo": true,
                          "bar": false,
                          "baz": 1
                        },
                        "anyOne": false,
                        "negate": false,
                        "params": {
                          "operator": "to equal",
                          "expected": {
                            "foo": true,
                            "bar": true,
                            "baz": 1
                          },
                          "details": "at bar, A has false and B has true",
                          "showDiff": true,
                          "actual": {
                            "foo": true,
                            "bar": false,
                            "baz": 1
                          },
                          "negate": false,
                          "assertion": "[Circular ~.suites.suites.0.suites.1.suites.0.failures.1.err.assertion]"
                        },
                        "light": false
                      },
                      "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
                      "generatedMessage": true,
                      "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
                      "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
                    },
                    "isRoot": false,
                    "uuid": "ba7b55de-1aeb-4045-a188-ec8b9a686cc5",
                    "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 0,
                "totalFailures": 2,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": true,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "should be true",
                "fullTitle": "Nesting Suites Child Nested Suite should be true",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "\"context\"",
                "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                "err": {},
                "isRoot": false,
                "uuid": "82a2873d-7b1d-4732-a3e6-a0471659f73d",
                "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be false",
                "fullTitle": "Nesting Suites Child Nested Suite should be false",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "bf03056b-efa2-4c46-98db-6e9e1910d857",
                "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "should be false",
                "fullTitle": "Nesting Suites Child Nested Suite should be false",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "bf03056b-efa2-4c46-98db-6e9e1910d857",
                "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 2000,
            "file": "/cases/nesting.js",
            "uuid": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/adamgruber/Sites/ma-test/cases/nesting.js",
            "passes": [
              {
                "title": "should be true",
                "fullTitle": "Nesting Suites Child Nested Suite should be true",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "context": "\"context\"",
                "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
                "err": {},
                "isRoot": false,
                "uuid": "82a2873d-7b1d-4732-a3e6-a0471659f73d",
                "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 2,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 1,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "should be true",
            "fullTitle": "Nesting Suites should be true",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"context\"",
            "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
            "err": {},
            "isRoot": false,
            "uuid": "21b0f40b-2847-4f3f-86f9-10e2f5f74d67",
            "parentUUID": "e8772d2f-290c-4141-bdf8-79dbb7cd11c8",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/cases/nesting.js",
        "uuid": "e8772d2f-290c-4141-bdf8-79dbb7cd11c8",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/adamgruber/Sites/ma-test/cases/nesting.js",
        "passes": [
          {
            "title": "should be true",
            "fullTitle": "Nesting Suites should be true",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "\"context\"",
            "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
            "err": {},
            "isRoot": false,
            "uuid": "21b0f40b-2847-4f3f-86f9-10e2f5f74d67",
            "parentUUID": "e8772d2f-290c-4141-bdf8-79dbb7cd11c8",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "72523088-3e1c-4ae5-95a1-1e972cfcd9d0",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should be true",
      "fullTitle": "Nesting Suites should be true",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"context\"",
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {},
      "isRoot": false,
      "uuid": "21b0f40b-2847-4f3f-86f9-10e2f5f74d67",
      "parentUUID": "e8772d2f-290c-4141-bdf8-79dbb7cd11c8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be true",
      "fullTitle": "Grandchild Nested Suite should be true",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {},
      "isRoot": false,
      "uuid": "3a41734b-da84-4f1e-ab10-4a8a1c4440bb",
      "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be false",
      "fullTitle": "Grandchild Nested Suite should be false",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {
        "operator": "to equal",
        "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
        "details": "at bar, A has false and B has true",
        "showDiff": true,
        "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
        "negate": false,
        "assertion": {
          "obj": {
            "foo": true,
            "bar": false,
            "baz": 1
          },
          "anyOne": false,
          "negate": false,
          "params": {
            "operator": "to equal",
            "expected": {
              "foo": true,
              "bar": true,
              "baz": 1
            },
            "details": "at bar, A has false and B has true",
            "showDiff": true,
            "actual": {
              "foo": true,
              "bar": false,
              "baz": 1
            },
            "negate": false,
            "assertion": "[Circular ~.allTests.2.err.assertion]"
          },
          "light": false
        },
        "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
        "generatedMessage": true,
        "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
        "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
      },
      "isRoot": false,
      "uuid": "63b71b67-c497-4a91-833b-0c562a3b3ac6",
      "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be true",
      "fullTitle": "Child Nested Suite should be true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"context\"",
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {},
      "isRoot": false,
      "uuid": "82a2873d-7b1d-4732-a3e6-a0471659f73d",
      "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be false",
      "fullTitle": "Child Nested Suite should be false",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "bf03056b-efa2-4c46-98db-6e9e1910d857",
      "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be false",
      "fullTitle": "Grandchild Nested Suite should be false",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {
        "operator": "to equal",
        "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
        "details": "at bar, A has false and B has true",
        "showDiff": true,
        "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
        "negate": false,
        "assertion": {
          "obj": {
            "foo": true,
            "bar": false,
            "baz": 1
          },
          "anyOne": false,
          "negate": false,
          "params": {
            "operator": "to equal",
            "expected": {
              "foo": true,
              "bar": true,
              "baz": 1
            },
            "details": "at bar, A has false and B has true",
            "showDiff": true,
            "actual": {
              "foo": true,
              "bar": false,
              "baz": 1
            },
            "negate": false,
            "assertion": "[Circular ~.allTests.5.err.assertion]"
          },
          "light": false
        },
        "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
        "generatedMessage": true,
        "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
        "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
      },
      "isRoot": false,
      "uuid": "48c27762-0f0e-40ae-8709-a94c8c74179d",
      "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be false",
      "fullTitle": "Grandchild Nested Suite should be false",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {
        "operator": "to equal",
        "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
        "details": "at bar, A has false and B has true",
        "showDiff": true,
        "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
        "negate": false,
        "assertion": {
          "obj": {
            "foo": true,
            "bar": false,
            "baz": 1
          },
          "anyOne": false,
          "negate": false,
          "params": {
            "operator": "to equal",
            "expected": {
              "foo": true,
              "bar": true,
              "baz": 1
            },
            "details": "at bar, A has false and B has true",
            "showDiff": true,
            "actual": {
              "foo": true,
              "bar": false,
              "baz": 1
            },
            "negate": false,
            "assertion": "[Circular ~.allTests.6.err.assertion]"
          },
          "light": false
        },
        "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
        "generatedMessage": true,
        "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
        "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
      },
      "isRoot": false,
      "uuid": "ba7b55de-1aeb-4045-a188-ec8b9a686cc5",
      "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [
    {
      "title": "should be false",
      "fullTitle": "Child Nested Suite should be false",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "bf03056b-efa2-4c46-98db-6e9e1910d857",
      "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPasses": [
    {
      "title": "should be true",
      "fullTitle": "Nesting Suites should be true",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"context\"",
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {},
      "isRoot": false,
      "uuid": "21b0f40b-2847-4f3f-86f9-10e2f5f74d67",
      "parentUUID": "e8772d2f-290c-4141-bdf8-79dbb7cd11c8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be true",
      "fullTitle": "Grandchild Nested Suite should be true",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {},
      "isRoot": false,
      "uuid": "3a41734b-da84-4f1e-ab10-4a8a1c4440bb",
      "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be true",
      "fullTitle": "Child Nested Suite should be true",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "context": "\"context\"",
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {},
      "isRoot": false,
      "uuid": "82a2873d-7b1d-4732-a3e6-a0471659f73d",
      "parentUUID": "7759adc1-350c-4481-bdbe-5bbf47351c2e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "should be false",
      "fullTitle": "Grandchild Nested Suite should be false",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {
        "operator": "to equal",
        "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
        "details": "at bar, A has false and B has true",
        "showDiff": true,
        "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
        "negate": false,
        "assertion": {
          "obj": {
            "foo": true,
            "bar": false,
            "baz": 1
          },
          "anyOne": false,
          "negate": false,
          "params": {
            "operator": "to equal",
            "expected": {
              "foo": true,
              "bar": true,
              "baz": 1
            },
            "details": "at bar, A has false and B has true",
            "showDiff": true,
            "actual": {
              "foo": true,
              "bar": false,
              "baz": 1
            },
            "negate": false,
            "assertion": "[Circular ~.allFailures.0.err.assertion]"
          },
          "light": false
        },
        "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
        "generatedMessage": true,
        "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
        "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
      },
      "isRoot": false,
      "uuid": "63b71b67-c497-4a91-833b-0c562a3b3ac6",
      "parentUUID": "f480b3ea-dd49-4f39-86c6-afc81c538dc2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be false",
      "fullTitle": "Grandchild Nested Suite should be false",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {
        "operator": "to equal",
        "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
        "details": "at bar, A has false and B has true",
        "showDiff": true,
        "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
        "negate": false,
        "assertion": {
          "obj": {
            "foo": true,
            "bar": false,
            "baz": 1
          },
          "anyOne": false,
          "negate": false,
          "params": {
            "operator": "to equal",
            "expected": {
              "foo": true,
              "bar": true,
              "baz": 1
            },
            "details": "at bar, A has false and B has true",
            "showDiff": true,
            "actual": {
              "foo": true,
              "bar": false,
              "baz": 1
            },
            "negate": false,
            "assertion": "[Circular ~.allFailures.1.err.assertion]"
          },
          "light": false
        },
        "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
        "generatedMessage": true,
        "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
        "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
      },
      "isRoot": false,
      "uuid": "48c27762-0f0e-40ae-8709-a94c8c74179d",
      "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be false",
      "fullTitle": "Grandchild Nested Suite should be false",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "// true.should.eql(bool);\nexp.should.eql(bool ? exp : expWrong);\nshouldAddContext && addContext(this, 'context');",
      "err": {
        "operator": "to equal",
        "expected": "{\n  \"bar\": true\n  \"baz\": 1\n  \"foo\": true\n}",
        "details": "at bar, A has false and B has true",
        "showDiff": true,
        "actual": "{\n  \"bar\": false\n  \"baz\": 1\n  \"foo\": true\n}",
        "negate": false,
        "assertion": {
          "obj": {
            "foo": true,
            "bar": false,
            "baz": 1
          },
          "anyOne": false,
          "negate": false,
          "params": {
            "operator": "to equal",
            "expected": {
              "foo": true,
              "bar": true,
              "baz": 1
            },
            "details": "at bar, A has false and B has true",
            "showDiff": true,
            "actual": {
              "foo": true,
              "bar": false,
              "baz": 1
            },
            "negate": false,
            "assertion": "[Circular ~.allFailures.2.err.assertion]"
          },
          "light": false
        },
        "_message": "expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)",
        "generatedMessage": true,
        "estack": "AssertionError: expected Object { foo: true, bar: false, baz: 1 } to equal Object { foo: true, bar: true, baz: 1 } (at bar, A has false and B has true)\n    at Assertion.fail (node_modules/should/cjs/should.js:258:17)\n    at Assertion.value (node_modules/should/cjs/should.js:335:19)\n    at Context.<anonymous> (helpers.js:32:20)",
        "diff": " {\n-   \"bar\": false\n+   \"bar\": true\n   \"baz\": 1\n   \"foo\": true\n }\n"
      },
      "isRoot": false,
      "uuid": "ba7b55de-1aeb-4045-a188-ec8b9a686cc5",
      "parentUUID": "c67d82cf-6bd3-4f8b-a2d3-5d2d90c75c01",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}